a<-xyplot(x = c(1,2))
data(mtcars)
a<-xyplot(x = mpg, data=mtcars)
data(mtcars)
a<-xyplot(x = mpg, data=mtcars)
a<-with(mtcars,xyplot(x = mpg, data=mtcars))
?xyplot
a<-xyplot(data=mtcars, mpg ~ cyl)
a
str(a)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
BodyWeight
?splom
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(votes, rating, data = movies) + geom_smooth()
library(ggplot2movies)
qplot(votes, rating, data = movies) + geom_smooth()
library(ggplot2)
library(ggplot2movies)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("ggplot2movies")
library(ggplot2movies)
install.packages("ggplot2movies")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
kmeansObj <- kmeans(df, centers=3)
df <- data.frame(x=x,y=y)
kmeansObj <- kmeans(df, centers=3)
df
df <- data.frame(x=x,y=y)
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3,each=4), sd=0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x,y, col = "blue", pch = 19, cex = 2)
text(x+0.05, y+0.05, labels= as.character(1:12))
#Cluster Dendogram
df <- data.frame(x=x,y=y)
distxy <- dist(df)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order], col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )}
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
#heatmap
set.seed(143)
dataMatrix <- as.matrix(df)[sample(1:12),]
heatmap(dataMatrix)
#kmeans
kmeansObj <- kmeans(df, centers=3)
names(kmeansObj)
kmeansObj[1]
kmeansObj[2]
kmeansObj[3]
kmeansObj[4]
kmeansObj[5]
kmeansObj[6]
kmeansObj[7]
kmeansObj[8]
kmeansObj[9]
kmeansObj[10]
a<-c(1,2,3)
a[0]
a[]
a[]
a[]
a[4]
plot(x,y,col=kmeansObj$cluster, pch = 19, cex=2)
par(mar = rep(0.2,4))
plot(x,y,col=kmeansObj$cluster, pch = 19, cex=2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
image(t(dataMatrix)[,nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[,order(kmeansObj$cluster):1], yaxt = "n")
image(t(dataMatrix)[,order(kmeansObj2$cluster):1], yaxt = "n")
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
image(t(dataMatrix)[,nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[,order(kmeansObj2$cluster):1], yaxt = "n")
image(t(dataMatrix)[,order(kmeansObj2$cluster)], yaxt = "n")
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
image(t(dataMatrix)[,nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[,order(kmeansObj2$cluster)], yaxt = "n")
image(t(dataMatrix)[,nrow(dataMatrix):1], yaxt = "n")
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
image(t(dataMatrix)[,nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[,order(kmeansObj2$cluster)], yaxt = "n")
set.seed(12345)
par(mar = rep(0.2,4))
dm <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix[,nrow(dm):1])
image(1:10, 1:40, t(dataMatrix)[,nrow(dm):1])
image(1:10, 1:40, t(dataMatrix)[,nrow(dm):1])
image(1:10, 1:40, t(dm)[,nrow(dm):1])
heatmap(dm)
image(1:10,1:40, t(dm)[,nrow(dm):1])
image(1:10, 1:40, t(dm)[,nrow(dm):1])
heatmap(dm)
set.seed(678910)
for(i in 1:40){
#flip a coin
coinFlip <- rbinom(1,size=1,prob=0.5)
#if coin is heads add a common pattern to that row
if (coinFlip){
dm[i,] <- dm[i,] + rep(c(0,3),each = 5)
}
}
par(mar = rep(0.2,4))
image(1:10,1:40, t(dm)[,nrow(dm):1])
heatmap(dm)
set.seed(12345)
par(mar = rep(0.2,4))
dm <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dm)[,nrow(dm):1])
heatmap(dm)
set.seed(678910)
for(i in 1:40){
#flip a coin
coinFlip <- rbinom(1,size=1,prob=0.5)
#if coin is heads add a common pattern to that row
if (coinFlip){
dm[i,] <- dm[i,] + rep(c(0,3),each = 5)
}
}
par(mar = rep(0.2,4))
image(1:10,1:40, t(dm)[,nrow(dm):1])
heatmap(dm)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
p
x
sum(p*x)
x<-0.75*0.3
y <- 0.48*0.7
x/(x+y)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x
lm(y~x)
?lm
lm(y~0+x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lm(.~x, weight= w)
lm(x, weight= w)
lm(x~0, weight= w)
lm(x~0+x, weight= w)
data(mtcars)
with(mtcars, lm(weight~mpg))
data(mtcars)
with(mtcars, lm(weight~mpg))
str(mtcars)
with(mtcars, lm(wt~mpg))
with(mtcars, lm(mpg~wt))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
data(mtcars)
plot(mtcars[,1:4])
hclust(dist(mtcars[,1:4]))
h <- hclust(dist(mtcars[,1:4]))
plot(h)
pnorm(q = 70, mean = 80, sd = 10)
qnorm(p = 0.95, lower.tail = T)
qnorm(p = 0.95, lower.tail = F)
qnorm(p = 0.95, lower.tail = T)
qnorm(p = 0.95, mean = 1100, sd = 75, lower.tail = T)
qnorm(p = 0.95, mean = 1100, sd = 7.5, lower.tail = T)
1-pbinom(q = 3, size = 5, prob = 0.5)
pnorm(1) - pnorm(-1)
ppois(q = 10, lambda = 15, lower.tail = T)
qt(p = 0.025, df = 8)
1100 + qt(p = 0.025, df = 8)*30/sqrt(9)
1100-qt(p = 0.025, df = 8)*30/sqrt(9)
6/2.306
(0.6*9+0.68*9)/(9+9-2)
x<-(0.6*9+0.68*9)/(9+9-2)
-2+qt(p = 0.025, df = 16)*sqrt(0.72/18)
-2+qt(p = 0.025, df = 9)*sqrt(0.72/18)
x<-(0.6*9+0.68*9)/(10+10-2)
-2+qt(p = 0.025, df = 18)*sqrt(0.72/18)
-2+qt(p = 0.025, df = 18)*sqrt(x/18)
x
-2+qt(p = 0.025, df = 18)*sqrt(x/20)
qt(p = 0.025, df = 18)
-2+qt(p = 0.025, df = 9)*sqrt(x/20)
x
-2+qt(p = 0.025, df = 9)*sqrt(x/10)
-2-qt(p = 0.025, df = 9)*sqrt(x/10)
-2-qt(p = 0.025, df = 9)*sqrt(x*(2/10))
-2+qt(p = 0.025, df = 9)*sqrt(x*(2/10))
-2+qt(p = 0.025, df = 18)*sqrt(x*(2/10))
-2-qt(p = 0.025, df = 18)*sqrt(x*(2/10))
2+qnorm(0.025)*sqrt(4/100+0.5^2/100)
2-qnorm(0.025)*sqrt(4/100+0.5^2/100)
y <- ( 1.5^2*8+1.8^2*8 )/(9+9-2)
y
-4+qt(p = 0.05, df = 16)*sqrt(y*(1/9+1/9))
-4-qt(p = 0.05, df = 16)*sqrt(y*(1/9+1/9))
rexp(n = 40, lambda = 0.2)
rexp(n = 40, rate =  = 0.2)
rexp(n = 40, rate = 0.2)
x <- rexp(n = 40, rate = 0.2)
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
}
)
str(x)
mean(x)
sd(x)
sqrt(25/1000)
sd(x)^2
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x)
sd(x)^2
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x)
sd(x)^2
x <- rexp(n = 40, rate = 0.2)
mean(x)
sd(x)^2
sd(x)^2/sqrt(40)
x <- rexp(n = 40, rate = 0.2)
mean(x)
sd(x)^2/sqrt(40)
x <- rexp(n = 40, rate = 0.2)
mean(x)
sd(x)^2/sqrt(40)
x <- rexp(n = 40, rate = 0.2)
mean(x)
sd(x)^2/sqrt(40)
x <- rexp(n = 40, rate = 0.2)
mean(x)
sd(x)^2/sqrt(40)
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x)
sd(x)^2/sqrt(40)
sd(x)^2
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x)
sd(x)^2
hist(x)
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x)
hist(x)
set.seed(123)
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x)
sd(x)^2
25/40
sd(x)^2
set.seed(124)
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x) #1/0.2
sd(x)^2 #compare to (1/0.2)^2/40
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x) #1/0.2
sd(x)^2 #compare to (1/0.2)^2/40
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x) #1/0.2
sd(x)^2 #compare to (1/0.2)^2/40
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x) #1/0.2
sd(x)^2 #compare to (1/0.2)^2/40
x <- sapply(1:1000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x) #1/0.2
sd(x)^2 #compare to (1/0.2)^2/40
hist(x)
x <- sapply(1:10000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
hist(x)
x <- sapply(1:10000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x) #1/0.2
sd(x)^2 #compare to (1/0.2)^2/40
x <- sapply(1:1000000, FUN = function(x){
mean(rexp(n = 40, rate = 0.2))
})
mean(x) #1/0.2
sd(x)^2 #compare to (1/0.2)^2/40
hist(x)
hist(x, breaks = 30)
hist(x, breaks = 1)
hist(x, breaks = 30)
hist(x, breaks = 2)
hist(x, breaks = 15)
data("ToothGrowth")
str(ToothGrowth)
summary(ToothGrowth)
unique(ToothGrowth[,3])
ToothGrowth %>% group_by(supp) %>% summarise(funs(mean(len)))
library(dplyr)
ToothGrowth %>% group_by(supp) %>% summarise(funs(mean(len)))
ToothGrowth %>% group_by(supp) %>% summarise(mean(len))
ToothGrowth %>% group_by(supp) %>% summarise(sd(len))
ToothGrowth %>% group_by(dose) %>% summarise(mean(len))
ToothGrowth %>% group_by(dose) %>% summarise(sd(len))
dir_ms <- "C:/Users/User/Google Drive/KLSE_ExtraData/MarketStatistics_Daily"
dir(dir_ms)
a <- as.character(gsub(pattern = "-", replacement = "", Sys.Date()))
grep(a, dir(dir_ms))
grep(a, dir(dir_ms), value = T)
dir[1] <- "C:/Users/User/Google Drive/KLSE_ExtraData/MarketStatistics_Daily"
dirr <- vector()
dirr[1] <- "C:/Users/User/Google Drive/KLSE_ExtraData/MarketStatistics_Daily"
dirr[1] <- "C:/Users/User/Google Drive/KLSE_ExtraData/MarketStatistics_Daily"
dirr[2] <- "C:/Users/User/Google Drive/M+ Data"
dirr[3] <- "C:/Users/User/Desktop/tempmplus"
dir(dir_ms)
sapply(dirr, FUN = function(x){
grep(a, dir(x), value = T)
})
TF <- sapply(dirr, FUN = function(x){
grepl(a, dir(x))
})
TF
TF <- sapply(dirr, FUN = function(x){
all(grepl(a, dir(x)))
})
TF
TF <- sapply(dirr, FUN = function(x){
any(grepl(a, dir(x)))
})
TF
a <- as.character(gsub(pattern = "-", replacement = "", c(Sys.Date() , Sys.Date()-1  )))
a
a <- as.character(gsub(pattern = "-", replacement = "", c(Sys.Date() , Sys.Date()-1  )))
Files <- sapply(dirr, FUN = function(x){
grep(a, dir(x), value = T)
})
Files <- sapply(dirr, FUN = function(x){
grep(a[1], dir(x), value = T)
})
Files
TF
all(TF)
print(TF)
print(Files)
if(!all(TF)){
TF <- sapply(dirr, FUN = function(x){
any(grepl(a[2], dir(x)))
})
Files <- sapply(dirr, FUN = function(x){
grep(a[2], dir(x), value = T)
})
print(TF)
print(Files)
}
mean(stepsday2.v)
library(dplyr)
setwd("C:/Users/User/Desktop")
df <- read.csv("activity.csv", stringsAsFactors = F)
stepsday <- df %>% group_by(date) %>% summarise(sum = sum(steps, na.rm = T))
stepsday.v <- as.numeric(as.data.frame(stepsday)[,2])
hist(stepsday.v)
mean(stepsday.v)
median(stepsday.v)
stepsavg <- df %>% group_by(interval) %>% summarise(avg = mean(steps, na.rm = T))
plot(x=stepsavg$interval, y = stepsavg$avg, type = "l")
stepsavg$interval[stepsavg$avg == max(stepsavg$avg)]
sum(is.na(df$steps))
stepsavg$interval[stepsavg$avg == max(stepsavg$avg)]
sum(is.na(df$steps))
df2 <- df
uniqueinterval.v <- unique(df2$interval)
stepsavg.df <- as.data.frame(stepsavg)
for(x in uniqueinterval.v){
u1 <- is.na(df2$steps)
u2 <- df2$interval %in% x
df2[u1&u2, "steps"] <- stepsavg.df[stepsavg.df$interval == x, "avg"]
}
head(df2)
stepsday2 <- df2 %>% group_by(date) %>% summarise(sum = sum(steps, na.rm = T))
stepsday2.v <- as.numeric(as.data.frame(stepsday2)[,2])
hist(stepsday2.v)
mean(stepsday2.v)
median(stepsday2.v)
mean(stepsday.v)
median(stepsday.v)
stepsday2 <- df2 %>% group_by(date) %>% summarise(sum = sum(steps, na.rm = T))
stepsday2.v <- as.numeric(as.data.frame(stepsday2)[,2])
hist(stepsday2.v)
mean(stepsday2.v)
median(stepsday2.v)
df2
df2 %>% mutate(wd = weekdays(date))
df2 %>% mutate(wd = weekdays(as.Date(date)))
df3 <- df2 %>% mutate(wd = weekdays(as.Date(date)))
tail(df3)
df3 <- df2 %>% mutate(wd = weekdays(as.Date(date)) %in% c("Saturday", "Sunday") )
df3
df3 <- df2 %>% mutate(wd = weekdays(as.Date(date)) %in% c("Saturday", "Sunday") )  %>% mutate(f = factor(wd, c(FALSE, TRUE), labels = c("weekday", "weekend")))
df3
df3 <- df2 %>% mutate(day1 = weekdays(as.Date(date)), wd = weekdays(as.Date(date)) %in% c("Saturday", "Sunday") )  %>% mutate(f = factor(wd, c(FALSE, TRUE), labels = c("weekday", "weekend")))
df3
df3 <- group_by(f, interval) %>% summarise(mean(steps))
df3 <- df2 %>% mutate(day1 = weekdays(as.Date(date)), wd = weekdays(as.Date(date)) %in% c("Saturday", "Sunday") )  %>% mutate(f = factor(wd, c(FALSE, TRUE), labels = c("weekday", "weekend")))
df3 <- group_by(f, interval) %>% summarise(mean(steps))
df3
df4 <- df3 %>% group_by(f, interval) %>% summarise(mean(steps))
df4
unlist(df4)
tail(df4)
library(ggplot2)
df4 <- df3 %>% group_by(f, interval) %>% summarise(msteps = mean(steps))
ggplot(data = df4, mapping = aes(x = interval, y = msteps), color = f) + geom_line()
ggplot(data = df4, mapping = aes(x = interval, y = msteps), color = f) + geom_line(color = f)
ggplot(data = df4, mapping = aes(x = interval, y = msteps)) + geom_line(color = f)
ggplot(data = df4, mapping = aes(x = interval, y = msteps, group = f)) + geom_line(color = f)
ggplot(data = df4, mapping = aes(x = interval, y = msteps, group = f))
ggplot(data = df4, mapping = aes(x = interval, y = msteps, group = f)) + geom_line()
ggplot(data = df4, mapping = aes(x = interval, y = msteps, group = f)) + geom_line(color = f)
ggplot(data = df4, mapping = aes(x = interval, y = msteps, group = f)) + geom_line(color = c("red","blue"))
ggplot(data = df4, mapping = aes(x = interval, y = msteps, colour = f)) + geom_line()
df3 <- df2 %>% mutate(day1 = weekdays(as.Date(date)), wd = weekdays(as.Date(date)) %in% c("Saturday", "Sunday") )  %>% mutate(factorwk = factor(wd, c(FALSE, TRUE), labels = c("weekday", "weekend")))
df4 <- df3 %>% group_by(factorwk, interval) %>% summarise(msteps = mean(steps))
tail(df4)
ggplot(data = df4, mapping = aes(x = interval, y = msteps, colour = factorwk)) + geom_line()
ggplot(data = df4, mapping = aes(x = interval, y = msteps, colour = factorwk)) + geom_line() + facet_grid()
ggplot(data = df4, mapping = aes(x = interval, y = msteps, group = factorwk)) + geom_line() + facet_grid()
ggplot(data = df4, mapping = aes(x = interval, y = msteps, group = factorwk)) + geom_line() + facet_grid(~factorwk)
ggplot(data = df4, mapping = aes(x = interval, y = msteps)) + geom_line() + facet_grid(~factorwk)
ggplot(data = df4, mapping = aes(x = interval, y = msteps)) + geom_line() + facet_grid(~factorwk) + ylabs("Mean steps")
ggplot(data = df4, mapping = aes(x = interval, y = msteps)) + geom_line() + facet_grid(~factorwk) + ylab("Mean steps")
ggplot(data = df4, mapping = aes(x = interval, y = msteps)) + geom_line() + facet_grid(~factorwk) + ylab("Average number of steps taken")
mean(stepsday2.v)
median(stepsday2.v)
mean(stepsday.v)
median(stepsday.v)
median(stepsday.v)
library(knitr)
knit2html(input = "PA1_template.Rmd", output = "PA1_template.html")
setwd("C:/Users/User/Desktop/DS5_Assignment1")
library(knitr)
knit2html(input = "PA1_template.Rmd", output = "PA1_template.html")
render(input = "PA1_template.Rmd", output = "PA1_template.html")
library(rmarkdown)
render(input = "PA1_template.Rmd", output = "PA1_template.html")
render(input = "PA1_template.Rmd", output_format = "html", output_file = "PA1_template.html")
?render
render(input = "PA1_template.Rmd", output_format = "html_document", output_file = "PA1_template.html")
